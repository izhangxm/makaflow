# app设置
mode: manager
listen: "::"
port: 8180

# rpc_key仅用户非public服务时验证
rpc_key: "11111"
server_url: www.example.vip

# 模板文件夹
subscribe_tp_dir: ./data/sub_tps

# 配置
xray_profile: ./runtime/xray_profile.yaml
singbox_profile: ./runtime/singbox_profile.yaml
user_profile_path: ./runtime/users.yaml

# icon
icon_repo_dir: ./runtime/iconrepos
icon_base_url: https://cat.makaflow.com/api/icon
icon_json: ./runtime/iconrepos/makaicon.json

# 规则文件
geosite_file: ./runtime/geodat/geosite.dat
geoip_file: ./runtime/geodat/geoip.dat
g_tmp_dir: ./runtime/geodat/g_tmp
rule_repo_dir: ./runtime
blackmatrix7_rule_dir: ./runtime/ios_rule_script/rule

# 服务配置文件
server_config_dir: ./runtime/server_config
xray_server_cfg: /usr/local/etc/xray/config.json
singbox_server_cfg: /etc/sing-box/config.json

# 第三方订阅节点
# - 获取节点的配置用来生成用户订阅，优先使用本服务为各个服务器生成的本地文件，
#   如果api强制使用远程，则请求远程节点配置
# - 过期时间为3天
# - 文件有是否过期的标识: outdated: false
# - outdated为true或者超过1天，则强制更新

# 设置忽略节点名称的正则表达式, 需要同时满足pass和exclude的规则才能通过
common_exclude: 官网|剩余|到期|订阅|频道|实际|备用|部分|革命|导航|地址|導航|延迟|速度|我们|审计
third_sub:
  example:
    # 是否允许用户订阅
    sub_enable: true
    prefix: ""
    sub_url: https://dddd.com/subscribe?token=9df908100bfdf011ed144d5916f3512c
    exclude_node: 官网|剩余|到期|订阅|频道|实际|备用|部分|革命|导航|地址|導航|延迟|速度|我们|审计
    repl_names:
      - ori: 高级
        repl: ""
      - ori: 专属
        repl: ""
      - ori: Lv\d # 支持python正则表达式
        repl: ""
    # 替换节点的url为镜像地址
    # server_mirr:
    #   - ori: asia.miaocn.cyou
    #     mirr: asia.example.vip
    #   - ori: eu.miaocn.cyou
    #     mirr: eu.example.vip
    #   - ori: na.miaocn.cyou
    #     mirr: na.example.vip

# 通过API管理的功能包括
# - 更新节点的配置并重启服务，并使用updated字段来标识是否已经同步到该节点，通过force选项强制同步到节点
# - 获取节点的配置用来生成用户订阅，优先使用本服务为各个服务器生成的本地文件，如果api强制使用远程或文件updated是否为false，则请求远程节点配置

# 属于本机管理的订阅节点
slaver:
  nodes:
    banwus:
      # 是否配置该服务器上的服务
      enable: false
      # 是否允许用户订阅
      sub_enable: false
      contry: us
      prefix: GIA|美国1
      # 这里配置api的前置url
      api_base: "https://www.example.com:1443/api"
      # rpc密钥
      rpc_key: "11111"
      # 这里是server的url地址
      server_url: gia01.example.vip

    linodeus:
      # 是否配置该服务器上的服务
      enable: false
      # 是否允许用户订阅
      sub_enable: false
      contry: us
      prefix: TRA|美国2
      # 这里配置api的前置url
      api_base: "https://example.com:1443/api"
      # rpc密钥
      rpc_key: "111111"
      # 这里是server的url地址
      server_url: linodeus.example.vip

# 接下来是客户端的一些默认配置

# shadowtls版本支持
client_shadowtls_versions:
  clash:
  stash:
  shadowrocket:
    - 3
  clashmeta:
    - 3
  singbox:
    - 3

# 这里singbox 每种协议出站的一些默认设定
singbox_outbound_default:
  multiplex:
    enabled: true
    protocol: smux
    max_connections: 8
    min_streams: 4

  shadowsocks:
    type: shadowsocks
    network: tcp
    udp_over_tcp: false # 打开后与multiplex冲突
    multiplex:
      enabled: true

# clashmeta 每种协议出站的一些默认设定
clashmeta_proxies_default:
  ss:
    type: ss
    udp: true
  hysteria:
    type: hysteria

# 可以使用的变量包括：
# 对于xray的服务来说:
# 1、inbound对象，包含修改的的 port 和增加的 server_url
# 2、client对象，对应请求的client，原封不动的来自于配置文件中的某个client
# 3、slaver对象，原封不对的来自于env中的slaver下的某个对象
# 4、通过key的名字来索引对象信息
#
# 提供的函数包括
# 1、pub # 由私钥转为公钥
# 2、b64en base64编码字符串
# 3、urlen url编码字符串


# 对象的值引用将被当作一句完整的python代码执行，提供的上下文对象为上述4个变量
# 示例：{inbound['port']}， 加入已经被赋值给 v，类型为字符串
# 执行代码：exec(f"res=f'{v}'")
# 结果就是格式化输出字符串值
# 如果可以被转化为int或bool，则进一步再转化

# 各种客户端的模板代码，inbound为xrayxray
proxy_tps_from_xray:
  # 因为有限制条件，所以每个协议可以有多个模板以适应不同应用的需要，
  # 程序会从第一个开始匹配，直到最后一个

  - protocol: shadowsocks
    meta:
      # 适用的应用, 这里需要使用标准名称，见tools/common.py中ClientApp对象的定义
      app: ["clash", "clashmeta", "shadowrocket"]
      # 当代码执行为真时，则继续此模板的生成
      condition: "1 == 1"
    share_link: "ss://{b64en(inbound['settings']['method']+':'+inbound['settings']['password']+':'+client['password'])}@{inbound['server_url']}:{inbound['port']}#{urlen(slaver['prefix']+'|ss|'+str(inbound['port']))}"
    content:
      name: "{slaver['prefix']}|ss|{inbound['port']}"
      type: ss
      server: "{inbound['server_url']}"
      port: "{inbound['port']}"
      cipher: "{inbound['settings']['method']}"
      password: "{inbound['settings']['password']}:{client['password']}"
      udp: true

  # 目前仅支持reality的配置
  - protocol: vless
    meta:
      # 适用的应用
      app: ["clashmeta"]
      # 当代码执行为真时，则选择此模板的用于生成
      condition: inbound['streamSettings']['security'] == 'reality'
    content:
      name: "{slaver['prefix']}|vless|{inbound['port']}"
      type: vless
      server: "{inbound['server_url']}"
      port: "{inbound['port']}"
      uuid: "{client['id']}"
      network: tcp
      tls: true
      udp: true
      flow: "{client['flow']}"
      client-fingerprint: chrome
      servername: "{inbound['streamSettings']['realitySettings']['dest']}"
      reality-opts:
        short-id: "{inbound['streamSettings']['realitySettings']['shortIds'][1]}"
        public-key: "{pub(inbound['streamSettings']['realitySettings']['privateKey'])}"

proxy_tps_from_singbox:
